# WARNING
# Do not edit this file manually. Your changes will be overwritten with next FlowPDF update.
# WARNING

package FlowPDF::Exception::UnexpectedEmptyValue;

use base qw/FlowPDF::Exception/;
use strict;
use warnings;

sub exceptionCode {
    return 'CBF0001UEV';
}

sub render {
    my ($self, $params) = @_;

    my $message = 'Got an unexpected empty value.';
    if (ref $params ne 'HASH') {
        $params ||= $message;
        return $params;
    }

    if (defined $params->{where} && defined $params->{expected}) {
        $message = sprintf(
            "Value of '%s' could not be empty. '%s' is expected.",
            $params->{where},
            $params->{expected});
    }
    elsif (defined $params->{where}) {
        $message = sprintf("Value of '%s' could not be empty.", $params->{where});
    }
    else {
        $message = 'Got unexpected empty value.';
    }

    return $message;
}

=head1 NAME

FlowPDF::Exception::UnexpectedEmptyValue

=head1 AUTHOR

CloudBees

=head1 DESCRIPTION

An exception that represents a situation when unexpected empty value has appeared.

=head1 USAGE

This exception could be created using new() method in one of the following ways:

=over

=item No parameters

Exception with default message will be created.

=item Custom scalar parameter

Exception with custom message will be created.

=item hashref with the following fields as parameter:

B<Note:> you may not use all of these arguments at once. It is allowed to omit some of them.

=over 4

=item where

A description where it happened.

=item expected

An expected value.

=back

=back

%%%LANG%%%

FlowPDF::Exception::UnexpectedEmptyValue->new({
    where => 'function result',
    expected => 'non-empty value'
})->throw();

%%%LANG%%%

=cut

1;

