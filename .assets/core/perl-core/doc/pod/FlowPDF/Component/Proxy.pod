=head1 NAME

FlowPDF::Component::Proxy

=head1 DESCRIPTION

This module provides standard mechanism for proxy-handling for ElectricFlow plugins.
This implementation should be used any time when proxy requirement appears.

=head1 Q&A

=head2 Why do we need a module, if one can just set environment variables?

It is a good question. Since our current perl is way too old (5.8.8 now), we have some
outdated modules and bugs, that have been fixed in releases after 5.8.8. For example,
we can't use default LWP functionality for https proxy handling due to bugs in LWP.
But there is a way to deal with that. We have Crypt::SSLeay module installed,
that provides requried functionality by the default way of the *nix OS. It is respects env variables.

This module does B<proper> implementation of all that logic and workarounds and should be used as
said in this help and provides a possibility to developer to change actual implementation of proxy
code without changing the interface. It is mush simpler than fix it in each plugin separately.


=head1 AUTHOR

Dmitriy <dshamatr@electric-cloud.com> Shamatrin

=head1 SYNOPSIS


    use FlowPDF::Component::Proxy;

    # create proxy dispatcher object
    my $proxy = EC::ProxyDriver->new({
        url => 'http://docker:3128',
        username => 'user1',
        password => 'password1',
        debug => 0,
    });

    # apply proxy

    $proxy->apply();

    # run some proxy related code
    ...;

    # detach proxy, if required.
    $proxy->detach();


=head1 METHODS

=over

=item B<new>

Constructor method, creates proxy dispatcher object.


    my $proxy = EC::ProxyDriver->new({
        url => 'http://docker:3128',
        username => 'user1',
        password => 'password1',
        debug => 0,
    });


=item B<apply>

Applies proxy changes to whole context in a right way. One should use that function
and be sure that proxy is set.


    $proxy->apply();


=item B<detach>

Disables proxy for a whole context. It could be useful sometimes to revert all changes that was made by apply function.


    $proxy->detach();


=item B<url>

Returns a proxy url if set. Returns empty string if not.


    my $proxy_url = $proxy->url();


=item B<auth_method>

Returns a proxy auth method that is being used. Currently only basic is supported,
which is set as default.


    my $auth_method = $proxy->auth_method();


=item B<username>

Returns a proxy auth username if set. Returns empty string if not.


    my $proxy_url = $proxy->username();


=item B<password>

Returns a proxy auth password if set. Returns empty string if not.


    my $proxy_url = $proxy->password();


=item B<debug>

Enables and disables debug mode for module.

To enable:


    $proxy->debug(1);


To disable


    $proxy->debug(0);


=item B<augment_request>

Augments HTTP::Request object with proxy headers.


    my $req = HTTP::Request->new(...);
    $req = $proxy->augment_request($req);


=item B<detach_request>

Detaches changes of request and removes added headers.


    $req = $proxy->detach_request($req);


=item B<augment_lwp>

Augments LWP::UserAgent object with proxy information.


    my $ua = LWP::UserAgent->new(...);
    $ua = $proxy->augment_lwp($ua);


=item B<detach_lwp>

Removes proxy setup from an LWP object.


    $ua = $proxy->detach_lwp($ua);


=back



=cut