=head1 NAME

FlowPDF::Client::REST

=head1 AUTHOR

CloudBees

=head1 DESCRIPTION

This module provides a simple rest client for various HTTP interactions.
It has been designed to be as closest as possible to HTTP::Request and LWP::UserAgent object methods.

=head1 USAGE

You can get FlowPDF::Client::REST object using regular constructor: new(), or through L<FlowPDF::Context> object,
using newRESTClient() methods.

Retrieving FlowPDF::Client::REST object from L<FlowPDF::Context> is preferred, because during retrieval from context,
some components may be applied automatically to FlowPDF::Client::REST object, like proxy and L<FlowPDF::Log>.



    sub stepGetContent {
        my ($pluginObject) = @_;

        # retrieving context object
        my $context = $pluginObject->getContext();
        # creating new FlowPDF::Client::REST object
        my $rest = $context->newRESTClient();
        # creatung new HTTP::Request object using FlowPDF APIs
        my $request = $rest->newRequest(GET => 'http://electric-cloud.com');
        # performing request and getting HTTP::Response object.
        my $response = $rest->doRequest($request);
        # printing response content
        print "Content: ", $response->decoded_content();
    }



=head1 METHODS

=head2 new($parameters)

=head3 Description

Constructor. Creates new FlowPDF::Client::REST object.

It has internal support of L<FlowPDF::Component::Proxy>.

To use FlowPDF::Client::REST with proxy you need to provide a proxy parameters to constructor. They are:

=over 4

=item B<url>

An address of the proxy to be used as http proxy.

=item B<username>

The username that is being used for proxy authorization.

=item B<password>

The password that is being used for username for proxy authorization.

=item B<debug>

Debug enabling switch. Debug output for FlowPDF::Proxy will be enabled if this is passed as true.

=back

=head3 Parameters

=over 4

=item (Optional)(HASH ref) A parameters that are required to get additional things from FlowPDF::Client::REST. Details above.

=back

=head3 Returns

=over

=item FlowPDF::Client::REST

=back

=head3 Usage



        my $rest = FlowPDF::Client::REST->new({
            proxy => {
                url => 'http://squid:3128',
                username => 'user1',
                password => 'user2'
            }
        });



In that example FlowPDF::Rest loads automatically L<FlowPDF::Component::Proxy> and creates new FlowPDF::Client::REST.

=head2 newRequest(@parameters)

Creates new HTTP::Request object.

This wrapper has been created to implement request augmenations using components during request object creation.

For example, if FlowPDF::Client::Rest has been created with proxy support, it will return HTTP::Request object with applied proxy fields.

This method has the same interface and usage as as HTTP::Request::new();

=head3 Parameters

=over 4

=item HTTP::Request::new() parameters.

=back

=head3 Returns

=over 4

=item HTTP::Request

=back

=head3 Usage



    my $request = $rest->newRequest(GET => 'https://electric-cloud.com');



=head2 doRequest($httpRequest)

=head3 Description

Performs HTTP request, using HTTP::Request object as parameter.

Also, this method supports API of LWP::UserAgent::request() method.

This method returns HTTP::Response object.

=head3 Parameters

=over 4

=item LWP::UserAgent::request() parameters

=back

=head3 Returns

=over 4

=item HTTP::Response

=back

=head3 Usage



    my $request = $rest->newRequest(GET => 'https://electric-cloud.com');
    my $response = $rest->doRequest($request);
    print $response->decoded_content();



=head2 augmentUrlWithParams($url, $arguments)

=head3 Description

Helper method, that provides a mechanism for adding query parameters to URL, with proper escaping.

=head3 Parameters

=over 4

=item (Required)(String) Url that should be augmented with query parameters.

=item (Required)(HASH ref) hash of parameters to be escaped and added to the query string.

=back

=head3 Returns

=over 4

=item (String) Url with added query parameters.

=back

=head3 Usage



    my $url = 'http://localhost:8080;

    $url = $rest->augmentUrlWithParams($url, {one=>'two'});
    # url = http://localhost:8080?one=two





=cut