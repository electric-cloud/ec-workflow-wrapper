# WARNING
# Do not edit this file manually. Your changes will be overwritten with next FlowPDF update.
# WARNING

=head1 NAME

FlowPDF::Client::REST

=head1 AUTHOR

CloudBees

=head1 DESCRIPTION

This module provides a simple rest client for various HTTP interactions.
It has been designed to be as closest as possible to HTTP::Request and LWP::UserAgent object methods.

=head1 USAGE

You can get FlowPDF::Client::REST object using regular constructor: new(), or through L<FlowPDF::Context> object,
using newRESTClient() methods.

Retrieving FlowPDF::Client::REST object from L<FlowPDF::Context> is preferred, because during retrieval from context,
some components may be applied automatically to FlowPDF::Client::REST object, like proxy and L<FlowPDF::Log>.

%%%LANG=perl%%%

    sub stepGetContent {
        my ($pluginObject) = @_;

        # retrieving context object
        my $context = $pluginObject->getContext();
        # creating new FlowPDF::Client::REST object
        my $rest = $context->newRESTClient();
        # creatung new HTTP::Request object using FlowPDF APIs
        my $request = $rest->newRequest(GET => 'http://electric-cloud.com');
        # performing request and getting HTTP::Response object.
        my $response = $rest->doRequest($request);
        # printing response content
        print "Content: ", $response->decoded_content();
    }

%%%LANG%%%

=head1 METHODS

=cut

package FlowPDF::Client::REST;
use base qw/FlowPDF::BaseClass2/;
use FlowPDF::Types;

__PACKAGE__->defineClass({
    ua    => FlowPDF::Types::Reference('LWP::UserAgent'),
    proxy => FlowPDF::Types::Reference('HASH'),
    auth  => FlowPDF::Types::Reference('FlowPDF::Client::REST::Auth')
});

use FlowPDF::Client::REST::Auth;
use FlowPDF::ComponentManager;
use FlowPDF::Log;
use FlowPDF::Log::FW;
use strict;
use warnings;
use LWP::UserAgent;
use HTTP::Request;
use Data::Dumper;
use Carp;
use URI::Escape qw/uri_escape/;

=head2 new($parameters)

=head3 Description

Constructor. Creates new FlowPDF::Client::REST object.

It has internal support of L<FlowPDF::Component::Proxy>.

To use FlowPDF::Client::REST with proxy you need to provide a proxy parameters to constructor. They are:

=over 4

=item B<url>

An address of the proxy to be used as http proxy.

=item B<username>

The username that is being used for proxy authorization.

=item B<password>

The password that is being used for username for proxy authorization.

=item B<debug>

Debug enabling switch. Debug output for FlowPDF::Proxy will be enabled if this is passed as true.

=back

=head3 Parameters

=over 4

=item (Optional)(HASH ref) A parameters that are required to get additional things from FlowPDF::Client::REST. Details above.

=back

=head3 Returns

=over

=item FlowPDF::Client::REST

=back

=head3 Usage

%%%LANG=perl%%%

        my $rest = FlowPDF::Client::REST->new({
            proxy => {
                url => 'http://squid:3128',
                username => 'user1',
                password => 'user2'
            }
        });

%%%LANG%%%

In that example FlowPDF::Rest loads automatically L<FlowPDF::Component::Proxy> and creates new FlowPDF::Client::REST.

=cut

sub new {
    my ($class, $params) = @_;

    # validating parameters
    # auth section
    if ($params->{auth} && (!ref $params->{auth} || ref $params->{auth} ne 'HASH')) {
        croak "Auth section should be a HASH reference.";
    }
    if ($params->{auth} && !$params->{auth}->{type}) {
        croak "Auth type is expected for auth section.";
    }

    # proxy section
    if ($params->{proxy} && (!ref $params->{proxy} || ref $params->{proxy} ne 'HASH')) {
        croak 'Proxy section should be a HASH reference.';
    }
    # end of validation

    fwLogDebug("Creating FlowPDF::Client::Rest with params: ", Dumper $params);

    my $restAuth = FlowPDF::Client::REST::Auth->new({
        authValues => {},
        authType   => '',
    });
    my $creationParams = {
        auth => $restAuth,
        ua   => $params->{ua} || LWP::UserAgent->new()
    };
    if ($params->{proxy}) {
        fwLogDebug("Loading Proxy Component on demand.");
        my $proxy = FlowPDF::ComponentManager->loadComponent('FlowPDF::Component::Proxy', $params->{proxy});
        fwLogDebug("Proxy component has been loaded.");
        $proxy->apply();
        $creationParams->{ua} = $proxy->augment_lwp($creationParams->{ua});
        $creationParams->{proxy} = $params->{proxy};
    }


    my $self = $class->SUPER::new($creationParams);
    my $restAuthValues = $restAuth->getAuthValues();
    my $oauth = undef;

    if ($params->{auth} && $params->{auth}->{type}) {
        my $auth = $params->{auth};

        if ($auth->{type} eq 'oauth') {
            $restAuth->setAuthType('oauth');
            delete $auth->{type};
            # op stands for ouathParams
            my $op = $auth;

            if ($op->{oauth_version} ne '1.0') {
                croak "Currently OAuth version $op->{oauth_version} is not supported. Suported versions: 1.0";
            }

            # request_method is removed from mandatory fields list for now.
            for my $p (qw/oauth_signature_method oauth_version/) {
                if (!defined $op->{$p}) {
                    croak "$p is mandatory for oauth component";
                }
            }
            fwLogDebug("Loading FlowPDF::Component::OAuth");
            $oauth = FlowPDF::ComponentManager->loadComponent('FlowPDF::Component::OAuth', $auth);
            fwLogDebug("OAuth component has been loaded.");
            $restAuthValues->{oauthComponent} = $oauth;
        }
        elsif ($auth->{type} eq 'basic') {
            $restAuth->setAuthType('basic');
            # TODO: Remove later one of these options and keep only one.
            if ($auth->{userName} || $auth->{username}) {
                $restAuthValues->{username} = $auth->{userName} || $auth->{username};
            }

            if ($auth->{password}) {
                $restAuthValues->{password} = $auth->{password};
            }
        }
        elsif ($auth->{type} eq 'bearer') {
            logWarning("Bearer auth type is not implemented yet");
        }
        else {
            if (keys %$auth) {
                logWarning("Following auth keys are not supported: " . join(", ", keys(%$auth)));
            }
        }
    }

    return $self;

}


=head2 newRequest(@parameters)

Creates new HTTP::Request object.

This wrapper has been created to implement request augmenations using components during request object creation.

For example, if FlowPDF::Client::Rest has been created with proxy support, it will return HTTP::Request object with applied proxy fields.

This method has the same interface and usage as as HTTP::Request::new();

=head3 Parameters

=over 4

=item HTTP::Request::new() parameters.

=back

=head3 Returns

=over 4

=item HTTP::Request

=back

=head3 Usage

%%%LANG=perl%%%

    my $request = $rest->newRequest(GET => 'https://electric-cloud.com');

%%%LANG%%%

=cut

sub newRequest {
    my ($self, @params) = @_;

    my $req = HTTP::Request->new(@params);
    my $proxy = $self->getProxy();
    if ($proxy) {
        my $proxyComponent = FlowPDF::ComponentManager->getComponent('FlowPDF::Component::Proxy');
        $req = $proxyComponent->augment_request($req);
    }

    my $auth = $self->getAuth();

    if (my $authType = $auth->getAuthType()) {
        my $values = $auth->getAuthValues();
        if ($authType eq 'basic') {
            $req->authorization_basic($values->{username}, $values->{password});
        }
    }
    return $req;
}


=head2 doRequest($httpRequest)

=head3 Description

Performs HTTP request, using HTTP::Request object as parameter.

Also, this method supports API of LWP::UserAgent::request() method.

This method returns HTTP::Response object.

=head3 Parameters

=over 4

=item LWP::UserAgent::request() parameters

=back

=head3 Returns

=over 4

=item HTTP::Response

=back

=head3 Usage

%%%LANG=perl%%%

    my $request = $rest->newRequest(GET => 'https://electric-cloud.com');
    my $response = $rest->doRequest($request);
    print $response->decoded_content();

%%%LANG%%%

=cut

sub doRequest {
    my ($self, @params) = @_;

    my $ua = $self->getUa();
    return $ua->request(@params);
}


=head2 augmentUrlWithParams($url, $arguments)

=head3 Description

Helper method, that provides a mechanism for adding query parameters to URL, with proper escaping.

=head3 Parameters

=over 4

=item (Required)(String) Url that should be augmented with query parameters.

=item (Required)(HASH ref) hash of parameters to be escaped and added to the query string.

=back

=head3 Returns

=over 4

=item (String) Url with added query parameters.

=back

=head3 Usage

%%%LANG=perl%%%

    my $url = 'http://localhost:8080;

    $url = $rest->augmentUrlWithParams($url, {one=>'two'});
    # url = http://localhost:8080?one=two

%%%LANG%%%

=cut

sub augmentUrlWithParams {
    my ($self, $url, $params) = @_;

    if (!$url) {
        croak "URL expected";
    }
    if (!ref $params) {
        croak "Required HASH reference for params";
    }

    $url =~ s|\/*?$||gs;
    my $gs = '';
    for my $k (keys %$params) {
        $gs .= uri_escape($k) . '=' . uri_escape($params->{$k}) . '&';
    }
    $gs =~ s/&$//s;
    if ($url =~ m|\?|s) {
        $gs = '&' . $gs;
    }
    else {
        $gs = '?' . $gs;
    }
    $url .= $gs;

    # $url =~ s/\?$//;
    return $url;
}


1;
