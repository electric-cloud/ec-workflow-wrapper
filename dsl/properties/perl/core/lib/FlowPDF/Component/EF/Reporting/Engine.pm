# WARNING
# Do not edit this file manually. Your changes will be overwritten with next FlowPDF update.
# WARNING

package FlowPDF::Component::EF::Reporting::Engine;
use base qw/FlowPDF::BaseClass2/;
use FlowPDF::Types;

__PACKAGE__->defineClass({
    ec => FlowPDF::Types::Reference('ElectricCommander')
});

use strict;
use warnings;
use Carp;
use Data::Dumper;

use FlowPDF::Log;

use FlowPDF::Exception::MissingFunctionArgument;
use FlowPDF::Exception::EntityDoesNotExist;

sub getReportObjectTypes {
    my ($self, $reportObjectType) = @_;

    my $ec = $self->getEc();
    my $resp = $ec->getReportObjectTypes();
    my $retval = [];
    for my $node ($resp->findnodes('//reportObjectTypeName')) {
        push @$retval, $node->string_value();
    }

    return $retval;
}

sub getPayloadDefinition {
    my ($self, $reportObjectType) = @_;

    if (!$reportObjectType) {
        FlowPDF::Exception::MissingFunctionArgument->new({
            function => 'getPayloadDefinition',
            argument => 'reportObjectType'
        })->throw();
    }
    my $ec = $self->getEc();
    my $reportObjectTypes = $self->getReportObjectTypes();

    my $ok = 0;
    for my $row (@$reportObjectTypes) {
        $ok++ && last if $reportObjectType eq $row;
    }

    unless ($ok) {
        FlowPDF::Exception::EntityDoesNotExist->new({
            entity => "report object type $reportObjectType",
            in     => 'available report object types',
            function => 'getPayloadDefinition',
        })->throw();
    }

    my $payloadDefinition = {};

    my $xpath = $ec->getReportObjectAttributes($reportObjectType);

    for my $node ($xpath->findnodes('//reportObjectAttribute')) {
        my $attributeName = $node->findvalue('reportObjectAttributeName')->string_value();
        my $dataType = $node->findvalue('type')->string_value();
        my $isRequired = $node->findvalue('required')->string_value() + 0;

        # getting enumerations if present
        my $enumerations = $node->find("enumerationValue");
        # it returns 0 if no enumerations were found.
        # if this list is not empty, we have enumerations
        $payloadDefinition->{$attributeName}->{enumerationValues} = [];
        if ($enumerations->size()) {
            for my $enum ($enumerations->get_nodelist()) {
                push (@{$payloadDefinition->{$attributeName}->{enumerationValues}}, $enum->string_value());
            }
        }
        $payloadDefinition->{$attributeName}->{name} = $attributeName;
        $payloadDefinition->{$attributeName}->{type} = $dataType;
        $payloadDefinition->{$attributeName}->{required} = $isRequired;
    }
    logTrace("Got payload of $reportObjectType type definition: ", Dumper $payloadDefinition);
    return $payloadDefinition;
}




1;
